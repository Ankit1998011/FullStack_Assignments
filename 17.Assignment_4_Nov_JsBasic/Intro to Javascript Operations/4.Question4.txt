Q4. Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts
important?

Ans.

"Operator precedence" and "associativity" in JavaScript. Understanding these concepts is crucial for writing correct and predictable 
code. 

1. "Operator Precedence":
   - "Precedence" determines the order in which operators are evaluated.
   - Operators with "higher precedence" are evaluated first.
   - For example, consider the expression: `3 + 4 * 5`.
     - The multiplication operator (`*`) has higher precedence than the addition operator (`+`).
       So, the expression evaluates as `3 + (4 * 5)`, resulting in "23".
   - It's essential to know the precedence hierarchy to avoid unexpected results.

2. "Associativity":
   - When operators have the "same precedence", associativity comes into play.
   - Associativity defines the "direction of processing" (left-to-right or right-to-left).
   - Examples:
     - "Left-Associativity": Operators are interpreted as `(a OP1 b) OP2 c`.
     - "Right-Associativity": Operators are interpreted as `a OP1 (b OP2 c)`.

3. "Examples":
   - "Multiplication (`*`) and Division (`/`)" have higher precedence than "Addition (`+`) and Subtraction (`-`).
     - So, `2 * 3 + 4` evaluates as `(2 * 3) + 4`, resulting in "10".
   - "Assignment operators" are "right-associative".
     - For instance: `a = b = 5;` is equivalent to `a = (b = 5);`.
     - The assignment operator returns the value assigned, allowing chaining.
   - "Exponentiation (`**`)" has "right-associativity".
     - `4 ** 3 ** 2` evaluates as `4 ** (3 ** 2)`, resulting in "262144".
   - "Unary operators" also follow precedence rules.
     - Example: `typeof a + b` is equivalent to `(typeof a) + b`, resulting in `"number2"`.

4. "Why Is This Important?":
   - "Predictable Behavior": Understanding precedence ensures that expressions are evaluated as intended.
   - "Debugging": Incorrect precedence can lead to subtle bugs.
   - "Code Readability": Proper use of parentheses enhances code clarity.
   - "Advanced Techniques": Mastery of these concepts enables efficient coding.

